/* global describe, it */
'use strict';

const chai = require('chai');

chai.use(require('dirty-chai'));
const expect = chai.expect;

const CodedError = require('../../../main/errors/CodedError');

describe('unit tests of CodedError', function () {
  it('should derive code & name correctly', () => {
    expect(() => CodedError({})).to.throw();
    expect(new (CodedError({
      code: 'E_FOOBAR'
    }))().name).to.equal('FoobarError');
    expect(new (CodedError({
      name: 'FoobarError'
    }))().code).to.equal('E_FOOBAR');
    expect(new (CodedError({
      code: 'E_FOO_BAR'
    }))().name).to.equal('FooBarError');
    expect(new (CodedError({
      name: 'FooBarError'
    }))().code).to.equal('E_FOO_BAR');
    expect(new (CodedError({
      code: 'FOOBAR'
    }))().name).to.equal('FoobarError');
    expect(new (CodedError({
      name: 'Foobar'
    }))().code).to.equal('E_FOOBAR');
    expect(new (CodedError({
      code: 'FOOBAR',
      name: 'Snafu'
    }))().name).to.equal('Snafu');
    expect(new (CodedError({
      name: 'Foobar',
      code: 'SNAFU'
    }))().code).to.equal('SNAFU');
  });
  it('should have static members available', function () {
    const MyError = CodedError({
      code: 'E_FOOBAR'
    });
    expect(MyError.NO_MESSAGE).to.equal('NO_MESSAGE');
    expect(MyError.NO_CODE).to.equal('NO_CODE');
  });
  it('should have code & name but no cause', () => {
    const code = 'E_MY';
    const name = 'MyError';
    const MyError = CodedError({
      code
    });
    const msg = 'boom';
    const e = new MyError({
      msg
    });
    expect(e).to.be.instanceOf(Error);
    expect(e).to.be.instanceOf(MyError);
    expect(e.name).to.equal(name);
    expect(e.code).to.equal(code);
    expect(e.code).to.equal(MyError.CODE);
    expect(e.message).to.equal(`${code}: ${msg}`);
    expect(e).to.be.instanceOf(MyError);
    expect(e).to.be.instanceOf(Error);
    expect(e.toObject()).to.deep.equal({
      message: 'E_MY: boom',
      name: 'MyError',
      stack: null,
      code: 'E_MY',
      info: undefined,
      cause: undefined
    });
  });
  it('should have a cause with code as name', () => {
    const causeCode = 'E_MY_ERROR_CAUSE';
    const code = 'E_MY';
    const name = 'MyError';
    const MyErrorCause = CodedError({
      code: causeCode
    });
    const MyError = CodedError({
      code
    });
    const msg = 'boom';
    const causeMsg = 'because many badness so high';
    const cause = new MyErrorCause({
      msg: causeMsg
    });
    const e = new MyError({
      msg,
      cause
    });
    expect(e).to.be.instanceOf(Error);
    expect(e).to.be.instanceOf(MyError);
    expect(MyError.CODE).to.equal(code);
    expect(MyErrorCause.CODE).to.equal(causeCode);
    expect(e.name).to.equal(name);
    expect(e.code).to.equal(code);
    expect(e.message).to.equal(`${code}: ${msg}: ${causeCode}: ${causeMsg}`);
    expect(e.toObject()).to.deep.equal({
      message: 'E_MY: boom: E_MY_ERROR_CAUSE: because many badness so high',
      name: 'MyError',
      stack: null,
      code: 'E_MY',
      info: undefined,
      cause: {
        message: 'E_MY_ERROR_CAUSE: because many badness so high',
        name: 'MyErrorCauseError',
        stack: null,
        code: 'E_MY_ERROR_CAUSE',
        info: undefined,
        cause: undefined
      }
    });
  });
  it('should work with no args but a cause', () => {
    const causeCode = 'E_MY_ERROR_CAUSE';
    const code = 'E_MY';
    const MyErrorCause = CodedError({
      code: causeCode
    });
    const MyError = CodedError({
      code: code
    });
    const cause = new MyErrorCause();
    const e = new MyError({
      cause
    });
    expect(e).to.be.instanceOf(Error);
    expect(e).to.be.instanceOf(MyError);
    expect(e.name).to.equal('MyError');
    expect(e.code).to.equal(code);
    expect(e.message).to.equal(`${code}: ${MyError.NO_MESSAGE}: ${causeCode}: ${MyErrorCause.NO_MESSAGE}`);
  });
  it('should work with a supererror & no name', () => {
    const superCode = 'E_SUPER';
    const subCode = 'E_SUB';
    const Super = CodedError({
      code: superCode
    });
    const Sub = Super.subclass({
      code: subCode
    });
    const e = new Sub();
    expect(e).to.be.instanceOf(Error);
    expect(e).to.be.instanceOf(Sub);
    expect(e).to.be.instanceOf(Super);
    expect(e.name).to.equal('SubError');
    expect(e.code).to.equal(subCode);
    expect(e.message).to.equal(`${subCode}: ${Sub.NO_MESSAGE}`);
    expect(() => {
      throw new Sub();
    }).to.throw(Sub);
    expect(() => {
      throw new Sub();
    }).to.throw(Super);
  });
  it('should have name, code & no cause', () => {
    const NAME = 'MyError';
    const CODE = 'E_MY_ERROR';
    const MyError = CodedError({
      code: CODE,
      name: NAME
    });
    const msg = 'boom';
    const e = new MyError({
      msg
    });
    expect(e).to.be.instanceOf(Error);
    expect(e).to.be.instanceOf(MyError);
    expect(e.name).to.equal(NAME);
    expect(e.code).to.equal(CODE);
    expect(e.message).to.equal(`${CODE}: ${msg}`);
  });
  it('should have name & no cause', () => {
    const name = 'MyError';
    const code = 'E_MY';
    const MyError = CodedError({
      name
    });
    const msg = 'boom';
    const e = new MyError({
      msg
    });
    expect(e).to.be.instanceOf(Error);
    expect(e).to.be.instanceOf(MyError);
    expect(e.name).to.equal(name);
    expect(e.code).to.equal(code);
    expect(e.message).to.equal(`${code}: ${msg}`);
  });
  it('should have a cause and code as name', () => {
    const causeName = 'MyCauseError';
    const causeCode = 'E_MY_CAUSE';
    const name = 'MyError';
    const code = 'E_MY';
    const MyCauseError = CodedError({
      name: causeName
    });
    const MyError = CodedError({
      name
    });
    const msg = 'boom';
    const causeMsg = 'because many badness so high';
    const cause = new MyCauseError({
      msg: causeMsg
    });
    const e = new MyError({
      msg,
      cause
    });
    expect(e).to.be.instanceOf(Error);
    expect(e).to.be.instanceOf(MyError);
    expect(MyError.CODE).to.equal(code);
    expect(MyCauseError.CODE).to.equal(causeCode);
    expect(e.name).to.equal(name);
    expect(e.code).to.equal(code);
    expect(e.message).to.equal(`${code}: ${msg}: ${causeCode}: ${causeMsg}`);
  });
  it('should have a cause array and code as name', () => {
    const causeName0 = 'MyCause0Error';
    const causeCode0 = 'E_MY_CAUSE0';
    const name = 'MyError';
    const code = 'E_MY';
    const MyCause0Error = CodedError({
      name: causeName0
    });
    const MyError = CodedError({
      name
    });
    const msg = 'boom';
    const causeMsg0 = 'because many badness so high';
    const cause0 = new MyCause0Error({
      msg: causeMsg0
    });
    const causeMsg1 = 'because stuff very bad';
    const cause1 = new Error(causeMsg1);
    const cause2 = null;
    const cause3 = 13;
    const e = new MyError({
      msg,
      cause: [cause0, cause1, cause2, cause3]
    });
    expect(e).to.be.instanceOf(Error);
    expect(e).to.be.instanceOf(MyError);
    expect(MyError.CODE).to.equal(code);
    expect(MyCause0Error.CODE).to.equal(causeCode0);
    expect(e.name).to.equal(name);
    expect(e.code).to.equal(code);
    expect(e.message).to.equal(`${code}: ${msg}: [${cause0.message}, ${cause1.message}, ${cause3}]`);
    expect(e.toObject()).to.deep.equal({
      message: e.message,
      name,
      stack: null,
      code,
      info: undefined,
      cause: [{
        message: cause0.message,
        name: causeName0,
        stack: null,
        code: causeCode0,
        info: undefined,
        cause: undefined
      }, {
        message: cause1.message,
        name: cause1.name,
        stack: null
      }, null, 13]
    });
  });
  it('should work with a supererror, a subclass & a subclass subclass', () => {
    const superCode = 'E_SUPER';
    const subCode = 'E_SUB';
    const sub2Code = 'E_SUB2';
    const Super = CodedError({
      code: superCode
    });
    const Sub = Super.subclass({
      code: subCode
    });
    const Sub2 = Sub.subclass({
      code: sub2Code
    });
    const e = new Sub2();
    expect(e).to.be.instanceOf(Error);
    expect(e).to.be.instanceOf(Sub2);
    expect(e).to.be.instanceOf(Sub);
    expect(e).to.be.instanceOf(Super);
    expect(e.name).to.equal('Sub2Error');
    expect(e.code).to.equal(sub2Code);
    expect(e.message).to.equal(`${sub2Code}: ${Sub2.NO_MESSAGE}`);
  });
  it('should work with named error & supererror', () => {
    const SUPERCODE = 'E_SUPER';
    const SUPERNAME = 'Super';
    const SUBCODE = 'E_SUB';
    const SUBNAME = 'Sub';
    const Super = CodedError({
      code: SUPERCODE,
      name: SUPERNAME
    });
    const Sub = Super.subclass({
      code: SUBCODE,
      name: SUBNAME
    });
    const e = new Sub();
    expect(e).to.be.instanceOf(Error);
    expect(e).to.be.instanceOf(Sub);
    expect(e).to.be.instanceOf(Super);
    expect(e.name).to.equal(SUBNAME);
    expect(e.code).to.equal(SUBCODE);
    expect(e.message).to.equal(`${SUBCODE}: ${Sub.NO_MESSAGE}`);
  });
  it('should work when JSON.stringify throws', function () {
    const code = 'E_MY';
    const MyError = CodedError({
      code
    });
    const msg = 'boom'; // make a recursive object in order to cause JSON.stringify to throw

    const info = {};
    info.info = info;
    let jsonError;

    try {
      JSON.stringify(info);
      expect.fail('should\'ve thrown');
    } catch (x) {
      jsonError = x;
    }

    const e = new MyError({
      msg,
      info
    });
    const json = JSON.parse(e.toJson());
    expect(json).to.deep.equal({
      jsonStringifyError: {
        message: jsonError.message,
        name: jsonError.name,
        stack: null
      },
      error: {
        message: e.message,
        name: e.name,
        code: e.code,
        stack: null
      }
    });
  });
  it('should work with permutations on omitting', function () {
    const code = 'E_MY';
    const name = 'MyError';
    const info = {
      one: 1,
      stack: 'should not be omitted because it is part of info, not part of a cause',
      code: '42'
    };
    const MyError = CodedError({
      code
    });
    const cause0 = new Error('the cause0');
    const cause1 = {
      one: 1,
      stack: 'again, not a stack',
      code: '84'
    };
    const msg = 'boom';
    const e = new MyError({
      msg,
      info,
      cause: [cause0, cause1]
    });
    [undefined, true, {
      omitting: 'stack'
    }, {
      omitting: ['stack']
    }].forEach(it => {
      expect(e.toObject(it)).to.deep.equal({
        message: e.message,
        name,
        stack: null,
        code: e.code,
        info,
        cause: [{
          message: cause0.message,
          name: cause0.name,
          stack: null
        }, {
          one: cause1.one,
          stack: null,
          code: cause1.code
        }]
      });
    });
    [false, {
      omitting: []
    }].forEach(it => {
      expect(e.toObject(it)).to.deep.equal({
        message: e.message,
        name,
        stack: e.stack,
        code: e.code,
        info,
        cause: [{
          message: cause0.message,
          name: cause0.name,
          stack: cause0.stack
        }, {
          one: cause1.one,
          stack: cause1.stack,
          code: cause1.code
        }]
      });
    });
    ['code'].forEach(it => {
      [{
        omitting: it
      }, {
        omitting: [it]
      }].forEach(arg => {
        expect(e.toObject(arg)).to.deep.equal({
          message: e.message,
          name,
          stack: e.stack,
          code: null,
          info,
          cause: [{
            message: cause0.message,
            name: cause0.name,
            stack: cause0.stack
          }, {
            one: cause1.one,
            stack: cause1.stack,
            code: null
          }]
        });
      });
    });
    ['cause'].forEach(it => {
      [{
        omitting: it
      }, {
        omitting: [it]
      }].forEach(arg => {
        expect(e.toObject(arg)).to.deep.equal({
          message: e.message,
          name,
          stack: e.stack,
          code: e.code,
          info,
          cause: null
        });
      });
    });
    expect(e.toObject({
      omitting: ['message', 'name']
    })).to.deep.equal({
      message: null,
      name: null,
      stack: e.stack,
      code: e.code,
      info,
      cause: [{
        message: null,
        name: null,
        stack: cause0.stack
      }, {
        one: cause1.one,
        stack: cause1.stack,
        code: cause1.code
      }]
    });
  });
  it('should accept a string as the argument of the constructor', function () {
    const message = 'a message';
    const MyError = CodedError({
      code: 'E_FOOBAR'
    });
    expect(new MyError(message).message).to.equal(`${MyError.CODE}: ${message}`);
  });
  it('should prefer message over msg in the constructor', function () {
    const message = 'a message';
    const msg = 'a msg';
    const MyError = CodedError({
      code: 'E_FOOBAR'
    });
    expect(new MyError({
      message,
      msg
    }).message).to.equal(`${MyError.CODE}: ${message}`);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy90ZXN0L3VuaXQvZXJyb3JzL0NvZGVkRXJyb3Iuc3BlYy5qcyJdLCJuYW1lcyI6WyJjaGFpIiwicmVxdWlyZSIsInVzZSIsImV4cGVjdCIsIkNvZGVkRXJyb3IiLCJkZXNjcmliZSIsIml0IiwidG8iLCJ0aHJvdyIsImNvZGUiLCJuYW1lIiwiZXF1YWwiLCJNeUVycm9yIiwiTk9fTUVTU0FHRSIsIk5PX0NPREUiLCJtc2ciLCJlIiwiYmUiLCJpbnN0YW5jZU9mIiwiRXJyb3IiLCJDT0RFIiwibWVzc2FnZSIsInRvT2JqZWN0IiwiZGVlcCIsInN0YWNrIiwiaW5mbyIsInVuZGVmaW5lZCIsImNhdXNlIiwiY2F1c2VDb2RlIiwiTXlFcnJvckNhdXNlIiwiY2F1c2VNc2ciLCJzdXBlckNvZGUiLCJzdWJDb2RlIiwiU3VwZXIiLCJTdWIiLCJzdWJjbGFzcyIsIk5BTUUiLCJjYXVzZU5hbWUiLCJNeUNhdXNlRXJyb3IiLCJjYXVzZU5hbWUwIiwiY2F1c2VDb2RlMCIsIk15Q2F1c2UwRXJyb3IiLCJjYXVzZU1zZzAiLCJjYXVzZTAiLCJjYXVzZU1zZzEiLCJjYXVzZTEiLCJjYXVzZTIiLCJjYXVzZTMiLCJzdWIyQ29kZSIsIlN1YjIiLCJTVVBFUkNPREUiLCJTVVBFUk5BTUUiLCJTVUJDT0RFIiwiU1VCTkFNRSIsImpzb25FcnJvciIsIkpTT04iLCJzdHJpbmdpZnkiLCJmYWlsIiwieCIsImpzb24iLCJwYXJzZSIsInRvSnNvbiIsImpzb25TdHJpbmdpZnlFcnJvciIsImVycm9yIiwib25lIiwib21pdHRpbmciLCJmb3JFYWNoIiwiYXJnIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOztBQUVBLE1BQU1BLElBQUksR0FBR0MsT0FBTyxDQUFDLE1BQUQsQ0FBcEI7O0FBQ0FELElBQUksQ0FBQ0UsR0FBTCxDQUFTRCxPQUFPLENBQUMsWUFBRCxDQUFoQjtBQUNBLE1BQU1FLE1BQU0sR0FBR0gsSUFBSSxDQUFDRyxNQUFwQjs7QUFFQSxNQUFN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LE9BQU8sR0FBR1IsVUFBVSxDQUFDO0FBQUVLLE1BQUFBLElBQUksRUFBRTtBQUFSLEtBQUQsQ0FBMUI7QUFDQU4sSUFBQUEsTUFBTSxDQUFDLElBQUlTLE9BQUosQ0FBWTtBQUFFUyxNQUFBQSxPQUFGO0FBQVdOLE1BQUFBO0FBQVgsS0FBWixFQUE4Qk0sT0FBL0IsQ0FBTixDQUE4Q2QsRUFBOUMsQ0FBaURJLEtBQWpELENBQXdELEdBQUVDLE9BQU8sQ0FBQ1EsSUFBSyxLQUFJQyxPQUFRLEVBQW5GO0FBQ0QsR0FOQyxDQUFGO0FBT0QsQ0E3Wk8sQ0FBUiIsInNvdXJjZXNDb250ZW50IjpbIi8qIGdsb2JhbCBkZXNjcmliZSwgaXQgKi9cbid1c2Ugc3RyaWN0J1xuXG5jb25zdCBjaGFpID0gcmVxdWlyZSgnY2hhaScpXG5jaGFpLnVzZShyZXF1aXJlKCdkaXJ0eS1jaGFpJykpXG5jb25zdCBleHBlY3QgPSBjaGFpLmV4cGVjdFxuXG5jb25zdCBDb2RlZEVycm9yID0gcmVxdWlyZSgnLi4vLi4vLi4vbWFpbi9lcnJvcnMvQ29kZWRFcnJvcicpXG5cbmRlc2NyaWJlKCd1bml0IHRlc3RzIG9mIENvZGVkRXJyb3InLCBmdW5jdGlvbiAoKSB7XG4gIGl0KCdzaG91bGQgZGVyaXZlIGNvZGUgJiBuYW1lIGNvcnJlY3RseScsICgpID0+IHtcbiAgICBleHBlY3QoKCkgPT4gQ29kZWRFcnJvcih7fSkpLnRvLnRocm93KClcblxuICAgIGV4cGVjdCgobmV3IChDb2RlZEVycm9yKHsgY29kZTogJ0VfRk9PQkFSJyB9KSkoKSkubmFtZSkudG8uZXF1YWwoJ0Zvb2JhckVycm9yJylcbiAgICBleHBlY3QoKG5ldyAoQ29kZWRFcnJvcih7IG5hbWU6ICdGb29iYXJFcnJvcicgfSkpKCkpLmNvZGUpLnRvLmVxdWFsKCdFX0ZPT0JBUicpXG5cbiAgICBleHBlY3QoKG5ldyAoQ29kZWRFcnJvcih7IGNvZGU6ICdFX0ZPT19CQVInIH0pKSgpKS5uYW1lKS50by5lcXVhbCgnRm9vQmFyRXJyb3InKVxuICAgIGV4cGVjdCgobmV3IChDb2RlZEVycm9yKHsgbmFtZTogJ0Zvb0JhckVycm9yJyB9KSkoKSkuY29kZSkudG8uZXF1YWwoJ0VfRk9PX0JBUicpXG5cbiAgICBleHBlY3QoKG5ldyAoQ29kZWRFcnJvcih7IGNvZGU6ICdGT09CQVInIH0pKSgpKS5uYW1lKS50by5lcXVhbCgnRm9vYmFyRXJyb3InKVxuICAgIGV4cGVjdCgobmV3IChDb2RlZEVycm9yKHsgbmFtZTogJ0Zvb2JhcicgfSkpKCkpLmNvZGUpLnRvLmVxdWFsKCdFX0ZPT0JBUicpXG5cbiAgICBleHBlY3QoKG5ldyAoQ29kZWRFcnJvcih7IGNvZGU6ICdGT09CQVInLCBuYW1lOiAnU25hZnUnIH0pKSgpKS5uYW1lKS50by5lcXVhbCgnU25hZnUnKVxuICAgIGV4cGVjdCgobmV3IChDb2RlZEVycm9yKHsgbmFtZTogJ0Zvb2JhcicsIGNvZGU6ICdTTkFGVScgfSkpKCkpLmNvZGUpLnRvLmVxdWFsKCdTTkFGVScpXG4gIH0pXG5cbiAgaXQoJ3Nob3VsZCBoYXZlIHN0YXRpYyBtZW1iZXJzIGF2YWlsYWJsZScsIGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCBNeUVycm9yID0gQ29kZWRFcnJvcih7IGNvZGU6ICdFX0ZPT0JBUicgfSlcbiAgICBleHBlY3QoTXlFcnJvci5OT19NRVNTQUdFKS50by5lcXVhbCgnTk9fTUVTU0FHRScpXG4gICAgZXhwZWN0KE15RXJyb3IuTk9fQ09ERSkudG8uZXF1YWwoJ05PX0NPREUnKVxuICB9KVxuXG4gIGl0KCdzaG91bGQgaGF2ZSBjb2RlICYgbmFtZSBidXQgbm8gY2F1c2UnLCAoKSA9PiB7XG4gICAgY29uc3QgY29kZSA9ICdFX01ZJ1xuICAgIGNvbnN0IG5hbWUgPSAnTXlFcnJvcidcblxuICAgIGNvbnN0IE15RXJyb3IgPSBDb2RlZEVycm9yKHsgY29kZSB9KVxuXG4gICAgY29uc3QgbXNnID0gJ2Jvb20nXG4gICAgY29uc3QgZSA9IG5ldyBNeUVycm9yKHsgbXNnIH0pXG4gICAgZXhwZWN0KGUpLnRvLmJlLmluc3RhbmNlT2YoRXJyb3IpXG4gICAgZXhwZWN0KGUpLnRvLmJlLmluc3RhbmNlT2YoTXlFcnJvcilcbiAgICBleHBlY3QoZS5uYW1lKS50by5lcXVhbChuYW1lKVxuICAgIGV4cGVjdChlLmNvZGUpLnRvLmVxdWFsKGNvZGUpXG4gICAgZXhwZWN0KGUuY29kZSkudG8uZXF1YWwoTXlFcnJvci5DT0RFKVxuICAgIGV4cGVjdChlLm1lc3NhZ2UpLnRvLmVxdWFsKGAke2NvZGV9OiAke21zZ31gKVxuICAgIGV4cGVjdChlKS50by5iZS5pbnN0YW5jZU9mKE15RXJyb3IpXG4gICAgZXhwZWN0KGUpLnRvLmJlLmluc3RhbmNlT2YoRXJyb3IpXG4gICAgZXhwZWN0KGUudG9PYmplY3QoKSkudG8uZGVlcC5lcXVhbCh7XG4gICAgICBtZXNzYWdlOiAnRV9NWTogYm9vbScsXG4gICAgICBuYW1lOiAnTXlFcnJvcicsXG4gICAgICBzdGFjazogbnVsbCxcbiAgICAgIGNvZGU6ICdFX01ZJyxcbiAgICAgIGluZm86IHVuZGVmaW5lZCxcbiAgICAgIGNhdXNlOiB1bmRlZmluZWRcbiAgICB9KVxuICB9KVxuXG4gIGl0KCdzaG91bGQgaGF2ZSBhIGNhdXNlIHdpdGggY29kZSBhcyBuYW1lJywgKCkgPT4ge1xuICAgIGNvbnN0IGNhdXNlQ29kZSA9ICdFX01ZX0VSUk9SX0NBVVNFJ1xuICAgIGNvbnN0IGNvZGUgPSAnRV9NWSdcbiAgICBjb25zdCBuYW1lID0gJ015RXJyb3InXG5cbiAgICBjb25zdCBNeUVycm9yQ2F1c2UgPSBDb2RlZEVycm9yKHsgY29kZTogY2F1c2VDb2RlIH0pXG4gICAgY29uc3QgTXlFcnJvciA9IENvZGVkRXJyb3IoeyBjb2RlIH0pXG5cbiAgICBjb25zdCBtc2cgPSAnYm9vbSdcbiAgICBjb25zdCBjYXVzZU1zZyA9ICdiZWNhdXNlIG1hbnkgYmFkbmVzcyBzbyBoaWdoJ1xuICAgIGNvbnN0IGNhdXNlID0gbmV3IE15RXJyb3JDYXVzZSh7IG1zZzogY2F1c2VNc2cgfSlcbiAgICBjb25zdCBlID0gbmV3IE15RXJyb3IoeyBtc2csIGNhdXNlIH0pXG4gICAgZXhwZWN0KGUpLnRvLmJlLmluc3RhbmNlT2YoRXJyb3IpXG4gICAgZXhwZWN0KGUpLnRvLmJlLmluc3RhbmNlT2YoTXlFcnJvcilcbiAgICBleHBlY3QoTXlFcnJvci5DT0RFKS50by5lcXVhbChjb2RlKVxuICAgIGV4cGVjdChNeUVycm9yQ2F1c2UuQ09ERSkudG8uZXF1YWwoY2F1c2VDb2RlKVxuICAgIGV4cGVjdChlLm5hbWUpLnRvLmVxdWFsKG5hbWUpXG4gICAgZXhwZWN0KGUuY29kZSkudG8uZXF1YWwoY29kZSlcbiAgICBleHBlY3QoZS5tZXNzYWdlKS50by5lcXVhbChgJHtjb2RlfTogJHttc2d9OiAke2NhdXNlQ29kZX06ICR7Y2F1c2VNc2d9YClcbiAgICBleHBlY3QoZS50b09iamVjdCgpKS50by5kZWVwLmVxdWFsKHtcbiAgICAgIG1lc3NhZ2U6ICdFX01ZOiBib29tOiBFX01ZX0VSUk9SX0NBVVNFOiBiZWNhdXNlIG1hbnkgYmFkbmVzcyBzbyBoaWdoJyxcbiAgICAgIG5hbWU6ICdNeUVycm9yJyxcbiAgICAgIHN0YWNrOiBudWxsLFxuICAgICAgY29kZTogJ0VfTVknLFxuICAgICAgaW5mbzogdW5kZWZpbmVkLFxuICAgICAgY2F1c2U6XG4gICAgICAgIHtcbiAgICAgICAgICBtZXNzYWdlOiAnRV9NWV9FUlJPUl9DQVVTRTogYmVjYXVzZSBtYW55IGJhZG5lc3Mgc28gaGlnaCcsXG4gICAgICAgICAgbmFtZTogJ015RXJyb3JDYXVzZUVycm9yJyxcbiAgICAgICAgICBzdGFjazogbnVsbCxcbiAgICAgICAgICBjb2RlOiAnRV9NWV9FUlJPUl9DQVVTRScsXG4gICAgICAgICAgaW5mbzogdW5kZWZpbmVkLFxuICAgICAgICAgIGNhdXNlOiB1bmRlZmluZWRcbiAgICAgICAgfVxuICAgIH0pXG4gIH0pXG5cbiAgaXQoJ3Nob3VsZCB3b3JrIHdpdGggbm8gYXJncyBidXQgYSBjYXVzZScsICgpID0+IHtcbiAgICBjb25zdCBjYXVzZUNvZGUgPSAnRV9NWV9FUlJPUl9DQVVTRSdcbiAgICBjb25zdCBjb2RlID0gJ0VfTVknXG5cbiAgICBjb25zdCBNeUVycm9yQ2F1c2UgPSBDb2RlZEVycm9yKHsgY29kZTogY2F1c2VDb2RlIH0pXG4gICAgY29uc3QgTXlFcnJvciA9IENvZGVkRXJyb3IoeyBjb2RlOiBjb2RlIH0pXG5cbiAgICBjb25zdCBjYXVzZSA9IG5ldyBNeUVycm9yQ2F1c2UoKVxuICAgIGNvbnN0IGUgPSBuZXcgTXlFcnJvcih7IGNhdXNlIH0pXG4gICAgZXhwZWN0KGUpLnRvLmJlLmluc3RhbmNlT2YoRXJyb3IpXG4gICAgZXhwZWN0KGUpLnRvLmJlLmluc3RhbmNlT2YoTXlFcnJvcilcbiAgICBleHBlY3QoZS5uYW1lKS50by5lcXVhbCgnTXlFcnJvcicpXG4gICAgZXhwZWN0KGUuY29kZSkudG8uZXF1YWwoY29kZSlcbiAgICBleHBlY3QoZS5tZXNzYWdlKS50by5lcXVhbChgJHtjb2RlfTogJHtNeUVycm9yLk5PX01FU1NBR0V9OiAke2NhdXNlQ29kZX06ICR7TXlFcnJvckNhdXNlLk5PX01FU1NBR0V9YClcbiAgfSlcblxuICBpdCgnc2hvdWxkIHdvcmsgd2l0aCBhIHN1cGVyZXJyb3IgJiBubyBuYW1lJywgKCkgPT4ge1xuICAgIGNvbnN0IHN1cGVyQ29kZSA9ICdFX1NVUEVSJ1xuICAgIGNvbnN0IHN1YkNvZGUgPSAnRV9TVUInXG5cbiAgICBjb25zdCBTdXBlciA9IENvZGVkRXJyb3IoeyBjb2RlOiBzdXBlckNvZGUgfSlcbiAgICBjb25zdCBTdWIgPSBTdXBlci5zdWJjbGFzcyh7IGNvZGU6IHN1YkNvZGUgfSlcblxuICAgIGNvbnN0IGUgPSBuZXcgU3ViKClcblxuICAgIGV4cGVjdChlKS50by5iZS5pbnN0YW5jZU9mKEVycm9yKVxuICAgIGV4cGVjdChlKS50by5iZS5pbnN0YW5jZU9mKFN1YilcbiAgICBleHBlY3QoZSkudG8uYmUuaW5zdGFuY2VPZihTdXBlcilcbiAgICBleHBlY3QoZS5uYW1lKS50by5lcXVhbCgnU3ViRXJyb3InKVxuICAgIGV4cGVjdChlLmNvZGUpLnRvLmVxdWFsKHN1YkNvZGUpXG4gICAgZXhwZWN0KGUubWVzc2FnZSkudG8uZXF1YWwoYCR7c3ViQ29kZX06ICR7U3ViLk5PX01FU1NBR0V9YClcbiAgICBleHBlY3QoKCkgPT4geyB0aHJvdyBuZXcgU3ViKCkgfSkudG8udGhyb3coU3ViKVxuICAgIGV4cGVjdCgoKSA9PiB7IHRocm93IG5ldyBTdWIoKSB9KS50by50aHJvdyhTdXBlcilcbiAgfSlcblxuICBpdCgnc2hvdWxkIGhhdmUgbmFtZSwgY29kZSAmIG5vIGNhdXNlJywgKCkgPT4ge1xuICAgIGNvbnN0IE5BTUUgPSAnTXlFcnJvcidcbiAgICBjb25zdCBDT0RFID0gJ0VfTVlfRVJST1InXG5cbiAgICBjb25zdCBNeUVycm9yID0gQ29kZWRFcnJvcih7IGNvZGU6IENPREUsIG5hbWU6IE5BTUUgfSlcblxuICAgIGNvbnN0IG1zZyA9ICdib29tJ1xuICAgIGNvbnN0IGUgPSBuZXcgTXlFcnJvcih7IG1zZyB9KVxuICAgIGV4cGVjdChlKS50by5iZS5pbnN0YW5jZU9mKEVycm9yKVxuICAgIGV4cGVjdChlKS50by5iZS5pbnN0YW5jZU9mKE15RXJyb3IpXG4gICAgZXhwZWN0KGUubmFtZSkudG8uZXF1YWwoTkFNRSlcbiAgICBleHBlY3QoZS5jb2RlKS50by5lcXVhbChDT0RFKVxuICAgIGV4cGVjdChlLm1lc3NhZ2UpLnRvLmVxdWFsKGAke0NPREV9OiAke21zZ31gKVxuICB9KVxuXG4gIGl0KCdzaG91bGQgaGF2ZSBuYW1lICYgbm8gY2F1c2UnLCAoKSA9PiB7XG4gICAgY29uc3QgbmFtZSA9ICdNeUVycm9yJ1xuICAgIGNvbnN0IGNvZGUgPSAnRV9NWSdcblxuICAgIGNvbnN0IE15RXJyb3IgPSBDb2RlZEVycm9yKHsgbmFtZSB9KVxuXG4gICAgY29uc3QgbXNnID0gJ2Jvb20nXG4gICAgY29uc3QgZSA9IG5ldyBNeUVycm9yKHsgbXNnIH0pXG4gICAgZXhwZWN0KGUpLnRvLmJlLmluc3RhbmNlT2YoRXJyb3IpXG4gICAgZXhwZWN0KGUpLnRvLmJlLmluc3RhbmNlT2YoTXlFcnJvcilcbiAgICBleHBlY3QoZS5uYW1lKS50by5lcXVhbChuYW1lKVxuICAgIGV4cGVjdChlLmNvZGUpLnRvLmVxdWFsKGNvZGUpXG4gICAgZXhwZWN0KGUubWVzc2FnZSkudG8uZXF1YWwoYCR7Y29kZX06ICR7bXNnfWApXG4gIH0pXG5cbiAgaXQoJ3Nob3VsZCBoYXZlIGEgY2F1c2UgYW5kIGNvZGUgYXMgbmFtZScsICgpID0+IHtcbiAgICBjb25zdCBjYXVzZU5hbWUgPSAnTXlDYXVzZUVycm9yJ1xuICAgIGNvbnN0IGNhdXNlQ29kZSA9ICdFX01ZX0NBVVNFJ1xuICAgIGNvbnN0IG5hbWUgPSAnTXlFcnJvcidcbiAgICBjb25zdCBjb2RlID0gJ0VfTVknXG5cbiAgICBjb25zdCBNeUNhdXNlRXJyb3IgPSBDb2RlZEVycm9yKHsgbmFtZTogY2F1c2VOYW1lIH0pXG4gICAgY29uc3QgTXlFcnJvciA9IENvZGVkRXJyb3IoeyBuYW1lIH0pXG5cbiAgICBjb25zdCBtc2cgPSAnYm9vbSdcbiAgICBjb25zdCBjYXVzZU1zZyA9ICdiZWNhdXNlIG1hbnkgYmFkbmVzcyBzbyBoaWdoJ1xuICAgIGNvbnN0IGNhdXNlID0gbmV3IE15Q2F1c2VFcnJvcih7IG1zZzogY2F1c2VNc2cgfSlcbiAgICBjb25zdCBlID0gbmV3IE15RXJyb3IoeyBtc2csIGNhdXNlIH0pXG4gICAgZXhwZWN0KGUpLnRvLmJlLmluc3RhbmNlT2YoRXJyb3IpXG4gICAgZXhwZWN0KGUpLnRvLmJlLmluc3RhbmNlT2YoTXlFcnJvcilcbiAgICBleHBlY3QoTXlFcnJvci5DT0RFKS50by5lcXVhbChjb2RlKVxuICAgIGV4cGVjdChNeUNhdXNlRXJyb3IuQ09ERSkudG8uZXF1YWwoY2F1c2VDb2RlKVxuICAgIGV4cGVjdChlLm5hbWUpLnRvLmVxdWFsKG5hbWUpXG4gICAgZXhwZWN0KGUuY29kZSkudG8uZXF1YWwoY29kZSlcbiAgICBleHBlY3QoZS5tZXNzYWdlKS50by5lcXVhbChgJHtjb2RlfTogJHttc2d9OiAke2NhdXNlQ29kZX06ICR7Y2F1c2VNc2d9YClcbiAgfSlcblxuICBpdCgnc2hvdWxkIGhhdmUgYSBjYXVzZSBhcnJheSBhbmQgY29kZSBhcyBuYW1lJywgKCkgPT4ge1xuICAgIGNvbnN0IGNhdXNlTmFtZTAgPSAnTXlDYXVzZTBFcnJvcidcbiAgICBjb25zdCBjYXVzZUNvZGUwID0gJ0VfTVlfQ0FVU0UwJ1xuICAgIGNvbnN0IG5hbWUgPSAnTXlFcnJvcidcbiAgICBjb25zdCBjb2RlID0gJ0VfTVknXG5cbiAgICBjb25zdCBNeUNhdXNlMEVycm9yID0gQ29kZWRFcnJvcih7IG5hbWU6IGNhdXNlTmFtZTAgfSlcbiAgICBjb25zdCBNeUVycm9yID0gQ29kZWRFcnJvcih7IG5hbWUgfSlcblxuICAgIGNvbnN0IG1zZyA9ICdib29tJ1xuICAgIGNvbnN0IGNhdXNlTXNnMCA9ICdiZWNhdXNlIG1hbnkgYmFkbmVzcyBzbyBoaWdoJ1xuICAgIGNvbnN0IGNhdXNlMCA9IG5ldyBNeUNhdXNlMEVycm9yKHsgbXNnOiBjYXVzZU1zZzAgfSlcbiAgICBjb25zdCBjYXVzZU1zZzEgPSAnYmVjYXVzZSBzdHVmZiB2ZXJ5IGJhZCdcbiAgICBjb25zdCBjYXVzZTEgPSBuZXcgRXJyb3IoY2F1c2VNc2cxKVxuICAgIGNvbnN0IGNhdXNlMiA9IG51bGxcbiAgICBjb25zdCBjYXVzZTMgPSAxM1xuICAgIGNvbnN0IGUgPSBuZXcgTXlFcnJvcih7IG1zZywgY2F1c2U6IFtjYXVzZTAsIGNhdXNlMSwgY2F1c2UyLCBjYXVzZTNdIH0pXG4gICAgZXhwZWN0KGUpLnRvLmJlLmluc3RhbmNlT2YoRXJyb3IpXG4gICAgZXhwZWN0KGUpLnRvLmJlLmluc3RhbmNlT2YoTXlFcnJvcilcbiAgICBleHBlY3QoTXlFcnJvci5DT0RFKS50by5lcXVhbChjb2RlKVxuICAgIGV4cGVjdChNeUNhdXNlMEVycm9yLkNPREUpLnRvLmVxdWFsKGNhdXNlQ29kZTApXG4gICAgZXhwZWN0KGUubmFtZSkudG8uZXF1YWwobmFtZSlcbiAgICBleHBlY3QoZS5jb2RlKS50by5lcXVhbChjb2RlKVxuICAgIGV4cGVjdChlLm1lc3NhZ2UpLnRvLmVxdWFsKGAke2NvZGV9OiAke21zZ306IFske2NhdXNlMC5tZXNzYWdlfSwgJHtjYXVzZTEubWVzc2FnZX0sICR7Y2F1c2UzfV1gKVxuICAgIGV4cGVjdChlLnRvT2JqZWN0KCkpLnRvLmRlZXAuZXF1YWwoe1xuICAgICAgbWVzc2FnZTogZS5tZXNzYWdlLFxuICAgICAgbmFtZSxcbiAgICAgIHN0YWNrOiBudWxsLFxuICAgICAgY29kZSxcbiAgICAgIGluZm86IHVuZGVmaW5lZCxcbiAgICAgIGNhdXNlOiBbe1xuICAgICAgICBtZXNzYWdlOiBjYXVzZTAubWVzc2FnZSxcbiAgICAgICAgbmFtZTogY2F1c2VOYW1lMCxcbiAgICAgICAgc3RhY2s6IG51bGwsXG4gICAgICAgIGNvZGU6IGNhdXNlQ29kZTAsXG4gICAgICAgIGluZm86IHVuZGVmaW5lZCxcbiAgICAgICAgY2F1c2U6IHVuZGVmaW5lZFxuICAgICAgfSwge1xuICAgICAgICBtZXNzYWdlOiBjYXVzZTEubWVzc2FnZSxcbiAgICAgICAgbmFtZTogY2F1c2UxLm5hbWUsXG4gICAgICAgIHN0YWNrOiBudWxsXG4gICAgICB9LFxuICAgICAgbnVsbCxcbiAgICAgIDEzXVxuICAgIH0pXG4gIH0pXG5cbiAgaXQoJ3Nob3VsZCB3b3JrIHdpdGggYSBzdXBlcmVycm9yLCBhIHN1YmNsYXNzICYgYSBzdWJjbGFzcyBzdWJjbGFzcycsICgpID0+IHtcbiAgICBjb25zdCBzdXBlckNvZGUgPSAnRV9TVVBFUidcbiAgICBjb25zdCBzdWJDb2RlID0gJ0VfU1VCJ1xuICAgIGNvbnN0IHN1YjJDb2RlID0gJ0VfU1VCMidcblxuICAgIGNvbnN0IFN1cGVyID0gQ29kZWRFcnJvcih7IGNvZGU6IHN1cGVyQ29kZSB9KVxuICAgIGNvbnN0IFN1YiA9IFN1cGVyLnN1YmNsYXNzKHsgY29kZTogc3ViQ29kZSB9KVxuICAgIGNvbnN0IFN1YjIgPSBTdWIuc3ViY2xhc3MoeyBjb2RlOiBzdWIyQ29kZSB9KVxuXG4gICAgY29uc3QgZSA9IG5ldyBTdWIyKClcblxuICAgIGV4cGVjdChlKS50by5iZS5pbnN0YW5jZU9mKEVycm9yKVxuICAgIGV4cGVjdChlKS50by5iZS5pbnN0YW5jZU9mKFN1YjIpXG4gICAgZXhwZWN0KGUpLnRvLmJlLmluc3RhbmNlT2YoU3ViKVxuICAgIGV4cGVjdChlKS50by5iZS5pbnN0YW5jZU9mKFN1cGVyKVxuICAgIGV4cGVjdChlLm5hbWUpLnRvLmVxdWFsKCdTdWIyRXJyb3InKVxuICAgIGV4cGVjdChlLmNvZGUpLnRvLmVxdWFsKHN1YjJDb2RlKVxuICAgIGV4cGVjdChlLm1lc3NhZ2UpLnRvLmVxdWFsKGAke3N1YjJDb2RlfTogJHtTdWIyLk5PX01FU1NBR0V9YClcbiAgfSlcblxuICBpdCgnc2hvdWxkIHdvcmsgd2l0aCBuYW1lZCBlcnJvciAmIHN1cGVyZXJyb3InLCAoKSA9PiB7XG4gICAgY29uc3QgU1VQRVJDT0RFID0gJ0VfU1VQRVInXG4gICAgY29uc3QgU1VQRVJOQU1FID0gJ1N1cGVyJ1xuICAgIGNvbnN0IFNVQkNPREUgPSAnRV9TVUInXG4gICAgY29uc3QgU1VCTkFNRSA9ICdTdWInXG5cbiAgICBjb25zdCBTdXBlciA9IENvZGVkRXJyb3IoeyBjb2RlOiBTVVBFUkNPREUsIG5hbWU6IFNVUEVSTkFNRSB9KVxuICAgIGNvbnN0IFN1YiA9IFN1cGVyLnN1YmNsYXNzKHsgY29kZTogU1VCQ09ERSwgbmFtZTogU1VCTkFNRSB9KVxuXG4gICAgY29uc3QgZSA9IG5ldyBTdWIoKVxuXG4gICAgZXhwZWN0KGUpLnRvLmJlLmluc3RhbmNlT2YoRXJyb3IpXG4gICAgZXhwZWN0KGUpLnRvLmJlLmluc3RhbmNlT2YoU3ViKVxuICAgIGV4cGVjdChlKS50by5iZS5pbnN0YW5jZU9mKFN1cGVyKVxuICAgIGV4cGVjdChlLm5hbWUpLnRvLmVxdWFsKFNVQk5BTUUpXG4gICAgZXhwZWN0KGUuY29kZSkudG8uZXF1YWwoU1VCQ09ERSlcbiAgICBleHBlY3QoZS5tZXNzYWdlKS50by5lcXVhbChgJHtTVUJDT0RFfTogJHtTdWIuTk9fTUVTU0FHRX1gKVxuICB9KVxuXG4gIGl0KCdzaG91bGQgd29yayB3aGVuIEpTT04uc3RyaW5naWZ5IHRocm93cycsIGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCBjb2RlID0gJ0VfTVknXG4gICAgY29uc3QgTXlFcnJvciA9IENvZGVkRXJyb3IoeyBjb2RlIH0pXG4gICAgY29uc3QgbXNnID0gJ2Jvb20nXG5cbiAgICAvLyBtYWtlIGEgcmVjdXJzaXZlIG9iamVjdCBpbiBvcmRlciB0byBjYXVzZSBKU09OLnN0cmluZ2lmeSB0byB0aHJvd1xuICAgIGNvbnN0IGluZm8gPSB7fVxuICAgIGluZm8uaW5mbyA9IGluZm9cbiAgICBsZXQganNvbkVycm9yXG4gICAgdHJ5IHtcbiAgICAgIEpTT04uc3RyaW5naWZ5KGluZm8pXG4gICAgICBleHBlY3QuZmFpbCgnc2hvdWxkXFwndmUgdGhyb3duJylcbiAgICB9IGNhdGNoICh4KSB7XG4gICAgICBqc29uRXJyb3IgPSB4XG4gICAgfVxuXG4gICAgY29uc3QgZSA9IG5ldyBNeUVycm9yKHsgbXNnLCBpbmZvIH0pXG4gICAgY29uc3QganNvbiA9IEpTT04ucGFyc2UoZS50b0pzb24oKSlcblxuICAgIGV4cGVjdChqc29uKS50by5kZWVwLmVxdWFsKHtcbiAgICAgIGpzb25TdHJpbmdpZnlFcnJvcjoge1xuICAgICAgICBtZXNzYWdlOiBqc29uRXJyb3IubWVzc2FnZSxcbiAgICAgICAgbmFtZToganNvbkVycm9yLm5hbWUsXG4gICAgICAgIHN0YWNrOiBudWxsXG4gICAgICB9LFxuICAgICAgZXJyb3I6IHtcbiAgICAgICAgbWVzc2FnZTogZS5tZXNzYWdlLFxuICAgICAgICBuYW1lOiBlLm5hbWUsXG4gICAgICAgIGNvZGU6IGUuY29kZSxcbiAgICAgICAgc3RhY2s6IG51bGxcbiAgICAgIH1cbiAgICB9KVxuICB9KVxuXG4gIGl0KCdzaG91bGQgd29yayB3aXRoIHBlcm11dGF0aW9ucyBvbiBvbWl0dGluZycsIGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCBjb2RlID0gJ0VfTVknXG4gICAgY29uc3QgbmFtZSA9ICdNeUVycm9yJ1xuICAgIGNvbnN0IGluZm8gPSB7XG4gICAgICBvbmU6IDEsXG4gICAgICBzdGFjazogJ3Nob3VsZCBub3QgYmUgb21pdHRlZCBiZWNhdXNlIGl0IGlzIHBhcnQgb2YgaW5mbywgbm90IHBhcnQgb2YgYSBjYXVzZScsXG4gICAgICBjb2RlOiAnNDInXG4gICAgfVxuXG4gICAgY29uc3QgTXlFcnJvciA9IENvZGVkRXJyb3IoeyBjb2RlIH0pXG4gICAgY29uc3QgY2F1c2UwID0gbmV3IEVycm9yKCd0aGUgY2F1c2UwJylcbiAgICBjb25zdCBjYXVzZTEgPSB7IG9uZTogMSwgc3RhY2s6ICdhZ2Fpbiwgbm90IGEgc3RhY2snLCBjb2RlOiAnODQnIH1cblxuICAgIGNvbnN0IG1zZyA9ICdib29tJ1xuICAgIGNvbnN0IGUgPSBuZXcgTXlFcnJvcih7IG1zZywgaW5mbywgY2F1c2U6IFtjYXVzZTAsIGNhdXNlMV0gfSk7XG5cbiAgICBbdW5kZWZpbmVkLCB0cnVlLCB7IG9taXR0aW5nOiAnc3RhY2snIH0sIHsgb21pdHRpbmc6IFsnc3RhY2snXSB9XS5mb3JFYWNoKGl0ID0+IHtcbiAgICAgIGV4cGVjdChlLnRvT2JqZWN0KGl0KSkudG8uZGVlcC5lcXVhbCh7XG4gICAgICAgIG1lc3NhZ2U6IGUubWVzc2FnZSxcbiAgICAgICAgbmFtZSxcbiAgICAgICAgc3RhY2s6IG51bGwsXG4gICAgICAgIGNvZGU6IGUuY29kZSxcbiAgICAgICAgaW5mbyxcbiAgICAgICAgY2F1c2U6IFt7XG4gICAgICAgICAgbWVzc2FnZTogY2F1c2UwLm1lc3NhZ2UsXG4gICAgICAgICAgbmFtZTogY2F1c2UwLm5hbWUsXG4gICAgICAgICAgc3RhY2s6IG51bGxcbiAgICAgICAgfSwge1xuICAgICAgICAgIG9uZTogY2F1c2UxLm9uZSxcbiAgICAgICAgICBzdGFjazogbnVsbCxcbiAgICAgICAgICBjb2RlOiBjYXVzZTEuY29kZVxuICAgICAgICB9XVxuICAgICAgfSlcbiAgICB9KTtcblxuICAgIFtmYWxzZSwgeyBvbWl0dGluZzogW10gfV0uZm9yRWFjaChpdCA9PiB7XG4gICAgICBleHBlY3QoZS50b09iamVjdChpdCkpLnRvLmRlZXAuZXF1YWwoe1xuICAgICAgICBtZXNzYWdlOiBlLm1lc3NhZ2UsXG4gICAgICAgIG5hbWUsXG4gICAgICAgIHN0YWNrOiBlLnN0YWNrLFxuICAgICAgICBjb2RlOiBlLmNvZGUsXG4gICAgICAgIGluZm8sXG4gICAgICAgIGNhdXNlOiBbe1xuICAgICAgICAgIG1lc3NhZ2U6IGNhdXNlMC5tZXNzYWdlLFxuICAgICAgICAgIG5hbWU6IGNhdXNlMC5uYW1lLFxuICAgICAgICAgIHN0YWNrOiBjYXVzZTAuc3RhY2tcbiAgICAgICAgfSwge1xuICAgICAgICAgIG9uZTogY2F1c2UxLm9uZSxcbiAgICAgICAgICBzdGFjazogY2F1c2UxLnN0YWNrLFxuICAgICAgICAgIGNvZGU6IGNhdXNlMS5jb2RlXG4gICAgICAgIH1dXG4gICAgICB9KVxuICAgIH0pO1xuXG4gICAgWydjb2RlJ10uZm9yRWFjaChpdCA9PiB7XG4gICAgICBbeyBvbWl0dGluZzogaXQgfSwgeyBvbWl0dGluZzogW2l0XSB9XS5mb3JFYWNoKGFyZyA9PiB7XG4gICAgICAgIGV4cGVjdChlLnRvT2JqZWN0KGFyZykpLnRvLmRlZXAuZXF1YWwoe1xuICAgICAgICAgIG1lc3NhZ2U6IGUubWVzc2FnZSxcbiAgICAgICAgICBuYW1lLFxuICAgICAgICAgIHN0YWNrOiBlLnN0YWNrLFxuICAgICAgICAgIGNvZGU6IG51bGwsXG4gICAgICAgICAgaW5mbyxcbiAgICAgICAgICBjYXVzZTogW3tcbiAgICAgICAgICAgIG1lc3NhZ2U6IGNhdXNlMC5tZXNzYWdlLFxuICAgICAgICAgICAgbmFtZTogY2F1c2UwLm5hbWUsXG4gICAgICAgICAgICBzdGFjazogY2F1c2UwLnN0YWNrXG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgb25lOiBjYXVzZTEub25lLFxuICAgICAgICAgICAgc3RhY2s6IGNhdXNlMS5zdGFjayxcbiAgICAgICAgICAgIGNvZGU6IG51bGxcbiAgICAgICAgICB9XVxuICAgICAgICB9KVxuICAgICAgfSlcbiAgICB9KTtcblxuICAgIFsnY2F1c2UnXS5mb3JFYWNoKGl0ID0+IHtcbiAgICAgIFt7IG9taXR0aW5nOiBpdCB9LCB7IG9taXR0aW5nOiBbaXRdIH1dLmZvckVhY2goYXJnID0+IHtcbiAgICAgICAgZXhwZWN0KGUudG9PYmplY3QoYXJnKSkudG8uZGVlcC5lcXVhbCh7XG4gICAgICAgICAgbWVzc2FnZTogZS5tZXNzYWdlLFxuICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgc3RhY2s6IGUuc3RhY2ssXG4gICAgICAgICAgY29kZTogZS5jb2RlLFxuICAgICAgICAgIGluZm8sXG4gICAgICAgICAgY2F1c2U6IG51bGxcbiAgICAgICAgfSlcbiAgICAgIH0pXG4gICAgfSlcblxuICAgIGV4cGVjdChlLnRvT2JqZWN0KHsgb21pdHRpbmc6IFsnbWVzc2FnZScsICduYW1lJ10gfSkpLnRvLmRlZXAuZXF1YWwoe1xuICAgICAgbWVzc2FnZTogbnVsbCxcbiAgICAgIG5hbWU6IG51bGwsXG4gICAgICBzdGFjazogZS5zdGFjayxcbiAgICAgIGNvZGU6IGUuY29kZSxcbiAgICAgIGluZm8sXG4gICAgICBjYXVzZTogW3tcbiAgICAgICAgbWVzc2FnZTogbnVsbCxcbiAgICAgICAgbmFtZTogbnVsbCxcbiAgICAgICAgc3RhY2s6IGNhdXNlMC5zdGFja1xuICAgICAgfSwge1xuICAgICAgICBvbmU6IGNhdXNlMS5vbmUsXG4gICAgICAgIHN0YWNrOiBjYXVzZTEuc3RhY2ssXG4gICAgICAgIGNvZGU6IGNhdXNlMS5jb2RlXG4gICAgICB9XVxuICAgIH0pXG4gIH0pXG5cbiAgaXQoJ3Nob3VsZCBhY2NlcHQgYSBzdHJpbmcgYXMgdGhlIGFyZ3VtZW50IG9mIHRoZSBjb25zdHJ1Y3RvcicsIGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCBtZXNzYWdlID0gJ2EgbWVzc2FnZSdcblxuICAgIGNvbnN0IE15RXJyb3IgPSBDb2RlZEVycm9yKHsgY29kZTogJ0VfRk9PQkFSJyB9KVxuICAgIGV4cGVjdChuZXcgTXlFcnJvcihtZXNzYWdlKS5tZXNzYWdlKS50by5lcXVhbChgJHtNeUVycm9yLkNPREV9OiAke21lc3NhZ2V9YClcbiAgfSlcblxuICBpdCgnc2hvdWxkIHByZWZlciBtZXNzYWdlIG92ZXIgbXNnIGluIHRoZSBjb25zdHJ1Y3RvcicsIGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCBtZXNzYWdlID0gJ2EgbWVzc2FnZSdcbiAgICBjb25zdCBtc2cgPSAnYSBtc2cnXG5cbiAgICBjb25zdCBNeUVycm9yID0gQ29kZWRFcnJvcih7IGNvZGU6ICdFX0ZPT0JBUicgfSlcbiAgICBleHBlY3QobmV3IE15RXJyb3IoeyBtZXNzYWdlLCBtc2cgfSkubWVzc2FnZSkudG8uZXF1YWwoYCR7TXlFcnJvci5DT0RFfTogJHttZXNzYWdlfWApXG4gIH0pXG59KVxuIl19